---
function formatNumber(num) {
  if (num >= 1e12) {
    return (num / 1e12).toFixed(1) + "B";
  } else if (num >= 1e9) {
    return (num / 1e9).toFixed(1) + "MM";
  } else if (num >= 1e6) {
    return (num / 1e6).toFixed(1) + "M";
  }
  return num.toLocaleString("en-US");
}

// Importa las funciones necesarias para hacer un fetch a la API de CoinGecko
const response = await fetch(
  "https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=10&page=1&sparkline=false"
);
const cryptoData = await response.json(); // Obtén los datos en formato JSON
console.log(cryptoData);
// Mapea los datos a un formato más sencillo si es necesario
const simplifiedData = cryptoData.map((coin) => ({
  rank: coin.market_cap_rank,
  name: coin.name,
  img: coin.image,
  symbol: coin.symbol,
  price: coin.current_price.toLocaleString("en-US", {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  }), // Formato de precio
  change: Math.abs(coin.price_change_percentage_24h).toLocaleString("en-US", {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  }), // Elimina el signo negativo
  marketCap: formatNumber(coin.market_cap).toLocaleString("en-US", {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  }), // Capitalización de mercado
  volume: formatNumber(coin.total_volume).toLocaleString("en-US", {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  }), // Volumen en 24h
  changePositive: coin.price_change_percentage_24h >= 0, // Para determinar el color del cambio
}));
---

<div class="w-full h-auto py-40">
  <table class="w-4/6 mx-auto bg-[#282A36] text-[#F8F8F2] rounded-lg shadow-lg">
    <thead class="bg-[#44475A] text-[#F8F8F2]">
      <tr>
        <th class="text-left p-4">#</th>
        <th class="text-left p-4">Name</th>
        <th class="text-right p-4">Price</th>
        <th class="text-right p-4">24h%</th>
        <th class="text-right p-4">Market cap</th>
        <th class="text-right p-4">Volumen 24h</th>
      </tr>
    </thead>
    <tbody>
      {
        simplifiedData.map((coin) => (
          <tr class={`border-b border-[#6272a4] transition duration-200`}>
            <td class="p-4">{coin.rank}</td>
            <td class="p-4 flex items-center gap-2">
              <img src={`${coin.img}`} alt="" width="25px" />
              <span>{coin.name}</span>
              <span class="text-[#555] uppercase font-bold">{coin.symbol}</span>
            </td>
            <td class="p-4 text-right">{coin.price} US$</td>
            <td
              class={`p-4 text-right ${coin.changePositive ? "text-[#50fa7b]" : "text-[#ff5555]"}`}
            >
              <div class="flex justify-end">
                <img
                  class="w-[20px]"
                  src={`${coin.changePositive ? "../../public/icons8-clasificar-arriba-30.png" : "../../public/icons8-clasificar-abajo-30.png"}`}
                  alt=""
                />
                <span
                  class={`${coin.changePositive ? "text-[#50fa7b]" : "text-[#ff5555]"}`}
                >
                  {coin.change}%
                </span>
              </div>
            </td>
            <td class="p-4 text-right">{coin.marketCap} US$</td>
            <td class="p-4 text-right">{coin.volume} US$</td>
          </tr>
        ))
      }
    </tbody>
  </table>
  <div class="flex justify-center mt-8">
    <button
      class="bg-[#44475A] text-[#F8F8F2] font-semibold py-2 px-4 rounded-lg shadow-lg hover:bg-[#6272a4] transition duration-200"
    >
      Explorar Mercado
    </button>
  </div>
</div>
